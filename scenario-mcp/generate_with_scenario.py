#!/usr/bin/env python3
"""
Scenario AI Image Generation for Claude Code Agents
Usage: python generate_with_scenario.py "your prompt here" [model_id] [width] [height]
"""

import sys
import asyncio
import json
import os

# Import from the same directory now
from scenario_ai_direct import ScenarioAI

async def main():
    """Generate images with Scenario AI."""
    if len(sys.argv) < 2:
        print("‚ùå Usage: python generate_with_scenario.py 'your prompt' [model_id] [width] [height]")
        print("\nExamples:")
        print("  python generate_with_scenario.py 'a magical forest with glowing trees'")
        print("  python generate_with_scenario.py 'cyberpunk city at night' flux.1-dev 1280 720")
        return
    
    prompt = sys.argv[1]
    model_id = sys.argv[2] if len(sys.argv) > 2 else "flux.1-dev"
    width = int(sys.argv[3]) if len(sys.argv) > 3 else 1024
    height = int(sys.argv[4]) if len(sys.argv) > 4 else 1024
    
    try:
        print(f"üé® Generating image with Scenario AI...")
        print(f"   Prompt: {prompt}")
        print(f"   Model: {model_id}")
        print(f"   Dimensions: {width}x{height}")
        print()
        
        scenario = ScenarioAI()
        result = await scenario.generate_image(prompt, model_id, width, height)
        
        if result["success"]:
            print("‚úÖ SUCCESS!")
            print(f"   {result['message']}")
            print(f"   Job ID: {result['data']['job_id']}")
            print(f"   Status: {result['data']['status']}")
            print()
            print("üîó Your image is being generated by Scenario AI!")
            print("   This usually takes 30-60 seconds depending on the model.")
            print()
            print("üìã Full Response:")
            print(json.dumps(result, indent=2))
        else:
            print("‚ùå FAILED!")
            print(f"   {result['message']}")
            print(json.dumps(result, indent=2))
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code or 0)